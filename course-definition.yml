slug: "shell"
name: "Build your own Shell"
short_name: "Shell"
release_status: "live"

description_md: |-
  A shell is a command-line interface that executes commands and manages processes. In this challenge, you'll build your own
  [POSIX compliant](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html) shell that's capable of interpreting
  shell commands, running external programs and builtin commands like `cd`, `pwd`, `echo` and more.

  Along the way, you'll learn about shell command parsing, REPLs, builtin commands, and more.

short_description_md: |-
  Learn about parsing shell commands, executing programs and more

completion_percentage: 20

languages:
  - slug: "c"
  - slug: "cpp"
  - slug: "csharp"
  - slug: "elixir"
  - slug: "gleam"
  - slug: "go"
  - slug: "java"
  - slug: "javascript"
  - slug: "kotlin"
  - slug: "php"
  - slug: "python"
  - slug: "ruby"
  - slug: "rust"
  - slug: "typescript"
  - slug: "zig"

marketing:
  difficulty: medium
  sample_extension_idea_title: "Command History"
  sample_extension_idea_description: "View and recall previously entered commands in your shell."
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text: "There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!"
    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "navigation"
    name: "Navigation"
    description_markdown: |
      In this challenge extension, you'll add directory navigation support by implementing the `cd` and `pwd` commands.

      Along the way, you'll learn about what the "current working directory" is, how to change it and more.

  - slug: "quoting"
    name: "Quoting"
    description_markdown: |
      In this challenge extension, you'll add quoting support to your shell.

      Quoting allows you to preserve whitespace and special characters in your shell commands.

  - slug: "redirection"
    name: "Redirection"
    description_markdown: |
      In this challenge extension, you'll add redirection support to your shell.

      Redirection allows you to redirect the output of a command to a file or another command.

  - slug: "completions"
    name: "Autocompletion"
    description_markdown: |
      In this challenge extension, you'll add programmable completion support to your shell.

      Programmable completion allows you to autocomplete commands and executable files.

  - slug: "pipelines"
    name: "Pipelines"
    description_markdown: |
      In this challenge extension, you'll add support for pipelines to your shell.

      Pipelines allow you to connect multiple commands together, so the output of one command becomes the input of the next command.

  - slug: "history"
    name: "History"
    description_markdown: |
      In this challenge extension, you'll add support for viewing and recalling previously entered commands using the `history` builtin.

      History allows you to view and recall previously entered commands. Also, use it to re-run previous commands using the UP and DOWN arrow keys.

  - slug: "history-persistence"
    name: "History Persistence"
    description_markdown: |
      In this challenge extension, you'll add support for persisting history to a file.

      History persistence allows you to save and load previously entered commands to and from a file.

stages:
  - slug: "oo8"
    name: "Print a prompt"
    difficulty: very_easy
    marketing_md: |-
      In this stage, you'll implement printing the shell prompt and waiting for user input.

  - slug: "cz2"
    name: "Handle invalid commands"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll implement handling invalid commands in your shell.

  - slug: "ff0"
    name: "REPL"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement a REPL (Read-Eval-Print Loop) for your shell.

  - slug: "pn5"
    name: "The exit builtin"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll implement the `exit` builtin command.

  - slug: "iz3"
    name: "The echo builtin"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the `echo` builtin command.

  - slug: "ez5"
    name: "The type builtin: builtins"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the `type` builtin command.

  - slug: "mg5"
    name: "The type builtin: executable files"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the `type` builtin command for your shell.

  - slug: "ip1"
    name: "Run a program"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run external programs with arguments.

  - slug: "ei0"
    primary_extension_slug: "navigation"
    name: "The pwd builtin"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to print the current working directory.

  - slug: "ra6"
    primary_extension_slug: "navigation"
    name: "The cd builtin: Absolute paths"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` builtin command with absolute paths.

  - slug: "gq9"
    primary_extension_slug: "navigation"
    name: "The cd builtin: Relative paths"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` builtin command with relative paths.

  - slug: "gp4"
    primary_extension_slug: "navigation"
    name: "The cd builtin: Home directory"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` builtin command with the `HOME` directory.

  - slug: "ni6"
    primary_extension_slug: "quoting"
    name: "Single quotes"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for quoting with single quotes.

  - slug: "tg6"
    primary_extension_slug: "quoting"
    name: "Double quotes"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for quoting with double quotes.

  - slug: "yt5"
    primary_extension_slug: "quoting"
    name: "Backslash outside quotes"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for quoting with backslashes only.

  - slug: "le5"
    primary_extension_slug: "quoting"
    name: "Backslash within single quotes"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for quoting with backslashes within single quotes.

  - slug: "gu3"
    primary_extension_slug: "quoting"
    name: "Backslash within double quotes"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for quoting with backslashes within double quotes.

  - slug: "qj0"
    primary_extension_slug: "quoting"
    name: "Executing a quoted executable"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for executing a quoted executable.

  - slug: "jv1"
    primary_extension_slug: "redirection"
    name: "Redirect stdout"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for redirecting the output of a command to a file.

  - slug: "vz4"
    primary_extension_slug: "redirection"
    name: "Redirect stderr"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for redirecting the standard error of a command to a file.

  - slug: "el9"
    primary_extension_slug: "redirection"
    name: "Append stdout"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for appending the output of a command to a file.

  - slug: "un3"
    primary_extension_slug: "redirection"
    name: "Append stderr"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for appending the standard error of a command to a file.

  - slug: "qp2"
    primary_extension_slug: "completions"
    name: "Builtin completion"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for autocompleting builtin commands.

  - slug: "gm9"
    primary_extension_slug: "completions"
    name: "Completion with arguments"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for allowing arguments to be used after completion.

  - slug: "qm8"
    primary_extension_slug: "completions"
    name: "Missing completions"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll implement support for handling invalid commands gracefully.

  - slug: "gy5"
    primary_extension_slug: "completions"
    name: "Executable completion"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for autocompleting external executables.

  - slug: "wh6"
    primary_extension_slug: "completions"
    name: "Multiple completions"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement support for handling multiple completions.

  - slug: "wt6"
    primary_extension_slug: "completions"
    name: "Partial completions"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement support for handling multiple completions with common prefixes.

  - slug: "br6"
    primary_extension_slug: "pipelines"
    name: "Dual-command pipeline"
    difficulty: hard
    marketing_md: |-
      Implement support for basic two-command pipelines like `command1 | command2`.

  - slug: "ny9"
    primary_extension_slug: "pipelines"
    name: "Pipelines with built-ins"
    difficulty: hard
    marketing_md: |-
      Extend pipeline support to handle built-in commands like `echo` or `type` within pipelines.

  - slug: "xk3"
    primary_extension_slug: "pipelines"
    name: "Multi-command pipelines"
    difficulty: hard
    marketing_md: |-
      Implement support for multi-command pipelines like `command1 | command2 | command3`.

  - slug: "bq4"
    primary_extension_slug: "history"
    name: "The history builtin"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll add support for the `history` builtin command in `type`.

  - slug: "yf5"
    primary_extension_slug: "history"
    name: "Listing history"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement the `history` builtin.

  - slug: "ag6"
    primary_extension_slug: "history"
    name: "Limiting history entries"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for limiting history entries.

  - slug: "rh7"
    primary_extension_slug: "history"
    name: "Up-arrow navigation"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for recalling history with the up arrow key.

  - slug: "vq0"
    primary_extension_slug: "history"
    name: "Down-arrow navigation"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for recalling history with the down arrow key.

  - slug: "dm2"
    primary_extension_slug: "history"
    name: "Executing commands from history"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for being able to press enter to execute a command recalled using UP-DOWN arrows.

  - slug: "za2"
    primary_extension_slug: "history-persistence"
    name: "Read history from file"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for reading history from a file.

  - slug: "in3"
    primary_extension_slug: "history-persistence"
    name: "Write history to file"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for writing history to a file.

  - slug: "sx3"
    primary_extension_slug: "history-persistence"
    name: "Append history to file"
    difficulty: hard
    marketing_md: |-
      In this stage, you'll implement support for appending history to a file.

  - slug: "zp4"
    primary_extension_slug: "history-persistence"
    name: "Read history on startup"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll ensure that your shell loads history from the file into memory on startup.

  - slug: "kz7"
    primary_extension_slug: "history-persistence"
    name: "Write history on exit"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll implement support for persisting history on exit.

  - slug: "jv2"
    primary_extension_slug: "history-persistence"
    name: "Append history on exit"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll implement support for appending the in-memory history to the history file when exiting.
