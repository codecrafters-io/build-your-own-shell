slug: "shell"
name: "Build your own Shell"
short_name: "Shell"
release_status: "alpha"

description_md: |-
  A shell is a command-line interface that executes commands and manages processes. In this challenge, you'll build your own
  [POSIX compliant](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html) shell that's capable of interpreting
  shell commands, running external programs and built-in commands like `cd`, `pwd`, `echo` and more.

  Along the way, you'll learn about REPLs, shell command parsing, built-in commands, and more.

short_description_md: |-
  Learn about parsing shell commands, executing programs and more

completion_percentage: 20

languages:
  - slug: "go"
  - slug: "python"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "Command History"
  sample_extension_idea_description: "View and recall previously entered commands in your shell."
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text: "There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!"
    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "navigation"
    name: "Directory Navigation"
    description_markdown: |
      In this challenge extension, you'll add directory navigation support to your shell implementation by introducing the `cd` and `pwd` commands.

      Along the way, you'll learn about handling paths, changing the current working directory, and printing the current working directory. These commands are essential for effective navigation and file system management in any shell environment.

stages:
  - slug: "oo8"
    name: "Shell Prompt"
    difficulty: very_easy
    description_md: |-
      In this stage, you'll implement the most basic shell functionality.
      A shell prompt is the user interface for your shell, where users can type and execute commands. Your task is to make your shell print a `$` character and wait for user input. The shell should not exit after printing the prompt but continue to wait for commands.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      ```

      If your shell prints the `$` prompt and waits for input, you'll pass this stage. Ensure that the shell does not exit immediately after printing the prompt.
    marketing_md: |-
      In this stage, you'll implement printing the shell prompt and waiting for user input.

  - slug: "cz2"
    name: "Missing Command"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the basic command handling for your shell.

      When a user enters a command that is not recognized by the shell, the program should print `<command>: command not found`. This is a common feature in most shells, providing feedback to the user when they attempt to execute an invalid command.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      $ nonexistent
      nonexistent: command not found
      ```

      If your shell prints `<command>: command not found` for an unrecognized command, you'll pass this stage.  Ensure that the shell does not exit immediately after printing the response.

      ### Notes

      - We will only pass commands that don't exist, you don't need to worry about finding the command in the system's PATH in this stage.
      - We won't test whether the prompt is printed again, only that the correct message is printed to stdout.
    marketing_md: |-
      In this stage, you'll implement handling unrecognized commands in your shell.

  - slug: "ff0"
    name: "REPL"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement a REPL (Read-Eval-Print Loop) for your shell.

      A REPL is an interactive loop that reads user input, evaluates it, prints the result, and then waits for the next input. Your task is to ensure that your shell can handle multiple commands in sequence, responding with `<command>: command not found` for each unrecognized command, without exiting after processing a command.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      $ invalid_command_1
      invalid_command_1: command not found
      $ invalid_command_2
      invalid_command_2: command not found
      $ invalid_command_3
      invalid_command_3: command not found
      ```

      The tester will send multiple commands, each time checking if `<command>: command not found` is printed to stdout. The program should not exit after processing these commands.

      ### Notes

      - Ensure that the shell remains running after processing each command.
      - The REPL should correctly handle multiple commands in sequence.
    marketing_md: |-
      In this stage, you'll implement a Read-Eval-Print Loop (REPL) for your shell.

  - slug: "pn5"
    name: "The Exit Built-in"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the `exit` built-in command for your shell.

      When the `exit` command is received, your shell should exit gracefully with an exit code of 0. This allows users to close the shell properly. Your task is to handle the `exit` command while continuing to respond to other commands as before.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      $ invalid_command_1
      invalid_command_1: command not found
      $ exit 0
      ```

      The tester will issue two unrecognized commands and check for the correct "command not found" responses. Then, the `exit` command will be issued, and the program should exit with code 0.

      ### Notes

      - Ensure that the `exit` command causes the shell to exit with code 0.
      - The shell should continue to handle other commands as usual until `exit` is received.
    marketing_md: |-
      In this stage, you'll implement the `exit` built-in command for your shell.

  - slug: "iz3"
    name: "The Echo Built-in"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `echo` built-in command for your shell.

      When the `echo` command is received, your shell should print the rest of the line to stdout. This command is useful for displaying text and is a common feature in most shells. Make sure to handle the `echo` command within your shell, rather than executing an external `echo` binary.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      $ echo pineapple, apple
      pineapple, apple
      $ echo banana, pear, mango
      banana, pear, mango
      $ echo hello world
      hello world
      ```

      The tester will check if the `echo` command correctly prints the provided text to stdout.

      ### Notes

      - Ensure that the `echo` command prints the rest of the line to stdout.
      - Prevent your shell from shelling out to an external `echo` binary.
      - The output should exactly match the input text following the `echo` command.
    marketing_md: |-
      In this stage, you'll implement the `echo` built-in command for your shell.

  - slug: "ez5"
    name: "The Type Built-in"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `type` built-in command for your shell.

      The `type` command is used to determine how a command would be interpreted if used. For built-in commands, it should indicate that they are shell built-ins. If the command is not recognized, it should indicate that the command is not found.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      $ type echo
      echo is a shell built-in
      $ type exit
      exit is a shell built-in
      $ type type
      type is a shell built-in
      $ type nonexistent
      nonexistent: command not found
      ```

      The tester will check if the `type` command correctly identifies built-in commands and provides the appropriate message for unrecognized commands.

      ### Notes

      - Ensure that the `type` command identifies built-in commands correctly.
      - The output for recognized built-ins should be `<command> is a shell built-in`.
      - The output for unrecognized commands should be `<command>: command not found`
    marketing_md: |-
      In this stage, you'll implement the `type` built-in command for your shell.

  - slug: "mg5"
    name: "The Type Built-in - 2"
    difficulty: hard
    description_md: |-
      In this stage, you'll enhance the `type` built-in command to search for executable files using the PATH environment variable.

      When a command is received, the program should search for the command in the directories listed in the PATH environment variable. If the command is found, the program should print the path to the command. If the command is not found, the program should print `<command>: command not found`.

      ### Tests

      The tester will execute your program like this:

      ```bash
      > ./myshell
      $ type ls
      /usr/bin/ls
      $ type abcd
      /usr/local/bin/abcd
      $ type missing
      missing: command not found
      ```

      The tester will check if the `type` command correctly identifies executable files in the PATH and provides the appropriate message for unrecognized commands.

      ### Notes

      - Ensure that the `type` command searches the directories listed in the PATH environment variable.
      - The output for found commands should be the full path to the command.
      - The output for unrecognized commands should be `<command>: command not found`
    marketing_md: |-
      In this stage, you'll implement the `type` built-in command for your shell.

  - slug: "ip1"
    name: "Run a program"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the ability for your shell to run external programs with arguments.

      When a valid program and its arguments are received as input, your shell should execute the program with the provided arguments. This is a fundamental feature of any shell, allowing users to run various commands and utilities.

      ### Tests

      The tester will execute your program like this:
      # ToDo: Update test
      ```bash
      > ./myshell
      $ mkdir -p /tmp/test1/test2
      $ touch /tmp/test1/test2/testing
      $ ls /tmp/test1/test2
      testing
      ```

      The tester will check if your shell correctly executes the given commands and their arguments.

      ### Notes

      - Ensure that the shell can correctly parse and execute commands with their arguments.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run external programs with arguments.

  - slug: "ei0"
    primary_extension_slug: "navigation"
    name: "The PWD builtin"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the `pwd` built-in command for your shell.

      [pwd](https://en.wikipedia.org/wiki/Pwd) stands for "print working directory" and is used to output the current working directory. This command is essential for users to know their current location in the filesystem.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./myshell
      $ pwd
      /path/to/current/directory
      ```

      The tester will check if the `pwd` command correctly prints the current working directory.

      ### Notes

      - Ensure that the `pwd` command outputs the full path of the current working directory.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to print the current working directory.

  - slug: "ra6"
    primary_extension_slug: "navigation"
    name: "The CD built-in: Absolute Paths"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `cd` built-in command to handle absolute paths for your shell.

      The `cd` command is used to change the current working directory. When an absolute path to an existing directory is provided, the shell should change the current working directory to that path. If the directory doesn't exist, it should print an error message indicating that the directory was not found.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./myshell
      $ cd /usr/local/bin
      $ pwd
      /usr/local/bin
      $ cd /does_not_exist
      cd: /does_not_exist: No such file or directory
      ```

      The tester will check if the `cd` command correctly changes the directory when a valid path is provided and if it properly handles invalid paths by displaying an appropriate error message.

      ### Notes

      - If the specified directory does not exist, print `cd: <directory>: No such file or directory`.
      - The `pwd` command will be used to verify the current working directory after using `cd`.
      ```
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` built-in command with absolute paths.

  - slug: "gq9"
    primary_extension_slug: "navigation"
    name: "The CD built-in: Relative Paths"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the `cd` built-in command to handle relative paths for your shell.

      The `cd` command should be able to change the current working directory using relative paths. Relative paths are specified relative to the current directory. If the specified directory does not exist, it should print an error message indicating that the directory was not found.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./myshell
      $ cd /usr
      $ pwd
      /usr
      $ cd ./local/bin
      $ pwd
      /usr/local/bin
      $ cd ../../
      $ pwd
      /usr
      $ cd missing
      cd: missing: No such file or directory
      ```

      The tester will check if the `cd` command correctly changes the directory using relative paths and if it properly handles invalid paths by displaying an appropriate error message.

      ### Notes

      - The `pwd` command will be used to verify the current working directory after using `cd`.
      - If the specified directory does not exist, print `cd: <directory>: No such file or directory`.
      - Relative paths like `./`, `../`, and more complex relative paths should be handled correctly.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` built-in command with relative paths.

  - slug: "gp4"
    primary_extension_slug: "navigation"
    name: "The CD built-in: HOME"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `cd` built-in command to handle the `~` character for your shell.

      The `~` character is a shorthand for the user's home directory. When `cd` is received with `~`, your shell should change the current working directory to the user's home directory. This feature enhances user convenience, making it easier to navigate to the home directory.

      ### Tests

      The tester will execute your program like this:

      ```bash
      $ ./myshell
      $ cd /usr/local/bin
      $ pwd
      /usr/local/bin
      $ cd ~
      $ pwd
      /home/user
      ```

      The tester will check if the `cd` command correctly changes the directory to the user's home directory when `~` is used.

      ### Notes

      - Ensure that the `cd` command interprets `~` as the user's home directory.
      - The `pwd` command will be used to verify the current working directory after using `cd ~`.
      - The home directory is typically specified by the `HOME` environment variable.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` built-in command with the `HOME` directory.
