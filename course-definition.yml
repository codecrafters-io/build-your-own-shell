slug: "shell"
name: "Build your own Shell"
short_name: "Shell"
release_status: "alpha"

description_md: |-
  A shell is a command-line interface that executes commands and manages processes. In this challenge, you'll build your own
  [POSIX compliant](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html) shell that's capable of interpreting
  shell commands, running external programs and built-in commands like `cd`, `pwd`, `echo` and more.

  Along the way, you'll learn about REPLs, shell command parsing, built-in commands, and more.

short_description_md: |-
  Learn about parsing shell commands, executing programs and more

completion_percentage: 20

languages:
  - slug: "go"
  - slug: "python"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "Command History"
  sample_extension_idea_description: "View and recall previously entered commands in your shell."
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text: "There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!"
    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "navigation"
    name: "Directory Navigation"
    description_markdown: |
      In this challenge extension, you'll add directory navigation support to your shell implementation by introducing the `cd` and `pwd` commands.

      Along the way, you'll learn about handling paths, changing the current working directory, and printing the current working directory. These commands are essential for effective navigation and file system management in any shell environment.

stages:
  - slug: "oo8"
    name: "Print a prompt"
    difficulty: very_easy
    description_md: |-
      In this stage, you'll implement printing a shell prompt (`$ `) and waiting for user input.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      The tester will then check whether your shell prints the `$ ` prompt and waits for user input.

      ### Notes

      - The prompt has two characters: `$`, and a space after it.
      - Your program must not exit after printing `$ `, it should wait for user input.
      - We'll handle reading commands and executing them in later stages, this stage only deals with printing the prompt.
    marketing_md: |-
      In this stage, you'll implement printing the shell prompt and waiting for user input.

  - slug: "cz2"
    name: "Handle missing commands"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement support for handling missing commands in your shell.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It will then send the following command to your shell:

      ```bash
      $ nonexistent
      nonexistent: command not found
      ```

      The tester will check whether your shell prints `<command_name>: command not found` for an unrecognized command.

      ### Notes

      - The command name will be a random string (like `missing_command_234`), so the response can't be hardcoded.
      - We'll handle executing "valid" commands like `echo`, `cd` etc. in later stages, this stage only deals with unrecognized commands.
      - In this stage it's okay if your program exits soon after printing the `<command_name>: command not found` message. In later stages
        we'll check for a REPL (Read-Eval-Print Loop), i.e. whether the shell prints a new prompt after processing each command.
    marketing_md: |-
      In this stage, you'll implement handling unrecognized commands in your shell.

  - slug: "ff0"
    name: "REPL"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement a [REPL (Read-Eval-Print Loop)](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop).

      A REPL is an interactive loop that reads user input, evaluates it, prints the result, and then waits for the next input.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It will then send a series of commands to your shell:

      ```bash
      $ invalid_command_1
      invalid_command_1: command not found
      $ invalid_command_2
      invalid_command_2: command not found
      $ invalid_command_3
      invalid_command_3: command not found
      $
      ```

      After each command, the tester will check if `<command_name>: command not found` is printed, and whether a prompt is printed for the next command.

      ### Notes

      - The exact number of commands sent and the command names will be random.
      - Just like the previous stages, all commands will be invalid commands, so the response will always be `<command_name>: command not found`.
    marketing_md: |-
      In this stage, you'll implement a REPL (Read-Eval-Print Loop) for your shell.

  - slug: "pn5"
    name: "The exit built-in"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the [`exit` built-in](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#exit).

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send an invalid command to your shell, followed by the `exit` command:

      ```bash
      $ invalid_command_1
      invalid_command_1: command not found
      $ exit 0
      ```

      After issuing the `exit 0` command, the tester will verify whether your program terminates with [code/status](https://en.wikipedia.org/wiki/Exit_status) 0.

      ### Notes

      - The tester will always pass in `0` as the argument to the `exit` command.
    marketing_md: |-
      In this stage, you'll implement the `exit` built-in command for your shell.

  - slug: "iz3"
    name: "The echo built-in"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the [`echo`](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html) built-in.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a series of `echo` commands to your shell:

      ```bash
      $ echo hello world
      hello world
      $ echo pineapple strawberry
      pineapple apple
      $
      ```

      After each command, the tester will check if the `echo` command correctly prints the provided text back.
    marketing_md: |-
      In this stage, you'll implement the `echo` built-in command for your shell.

  - slug: "ez5"
    name: "The type built-in: built-ins"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `type` built-in command for your shell.

      The `type` command is used to determine how a command would be interpreted if used. For built-in commands, it should indicate that they are shell built-ins. If the command is not recognized, it should indicate that the command is not found.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a series of `type` commands to your shell:

      ```bash
      $ type echo
      echo is a shell built-in
      $ type exit
      exit is a shell built-in
      $ type type
      type is a shell built-in
      $ type nonexistent
      nonexistent: command not found
      $
      ```

      The tester will check if the `type` command correctly identifies built-in commands and provides the appropriate message for unrecognized commands.

      ### Notes

      - Ensure that the `type` command identifies built-in commands correctly.
      - The output for recognized built-ins should be `<command> is a shell built-in`.
      - The output for unrecognized commands should be `<command>: command not found`
    marketing_md: |-
      In this stage, you'll implement the `type` built-in command for your shell.

  - slug: "mg5"
    name: "The type built-in: executable files"
    difficulty: hard
    description_md: |-
      In this stage, you'll enhance the `type` built-in command to search for executable files using the PATH environment variable.

      When a command is received, the program should search for the command in the directories listed in the PATH environment variable. If the command is found, the program should print the path to the command. If the command is not found, the program should print `<command>: command not found`.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a series of `type` commands to your shell:

      ```bash
      $ type ls
      /usr/bin/ls
      $ type abcd
      /usr/local/bin/abcd
      $ type missing
      missing: command not found
      $
      ```

      The tester will check if the `type` command correctly identifies executable files in the PATH and provides the appropriate message for unrecognized commands.

      ### Notes

      - Ensure that the `type` command searches the directories listed in the PATH environment variable.
      - The output for found commands should be the full path to the command.
      - The output for unrecognized commands should be `<command>: command not found`
    marketing_md: |-
      In this stage, you'll implement the `type` built-in command for your shell.

  - slug: "ip1"
    name: "Run a program"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the ability for your shell to run external programs with arguments.

      When a valid program and its arguments are received as input, your shell should execute the program with the provided arguments. This is a fundamental feature of any shell, allowing users to run various commands and utilities.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a command, that you need to execute:

      ```bash
      $ ./my_exe
      random_string
      $
      ```

      The tester will check if your shell correctly executes the given command. The output of the command will be checked to ensure that it matches the expected output.

      ### Notes

      - Ensure that the shell can correctly parse and execute commands with their arguments.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run external programs with arguments.

  - slug: "ei0"
    primary_extension_slug: "navigation"
    name: "The pwd built-in"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the `pwd` built-in command for your shell.

      [pwd](https://en.wikipedia.org/wiki/Pwd) stands for "print working directory" and is used to output the current working directory. This command is essential for users to know their current location in the filesystem.

      ### Tests


      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a `pwd` command to your shell:

      ```bash
      $ pwd
      /path/to/current/directory
      $
      ```

      The tester will check if the `pwd` command correctly prints the current working directory.

      ### Notes

      - Ensure that the `pwd` command outputs the full path of the current working directory.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to print the current working directory.

  - slug: "ra6"
    primary_extension_slug: "navigation"
    name: "The cd built-in: Absolute paths"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `cd` built-in command to handle absolute paths for your shell.

      The `cd` command is used to change the current working directory. When an absolute path to an existing directory is provided, the shell should change the current working directory to that path. If the directory doesn't exist, it should print an error message indicating that the directory was not found.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a series of `cd` commands to your shell:

      ```bash
      $ cd /usr/local/bin
      $ pwd
      /usr/local/bin
      $ cd /does_not_exist
      cd: /does_not_exist: No such file or directory
      $
      ```

      The tester will check if the `cd` command correctly changes the directory when a valid path is provided and if it properly handles invalid paths by displaying an appropriate error message.

      ### Notes

      - If the specified directory does not exist, print `cd: <directory>: No such file or directory`.
      - The `pwd` command will be used to verify the current working directory after using `cd`.
      ```
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` built-in command with absolute paths.

  - slug: "gq9"
    primary_extension_slug: "navigation"
    name: "The cd built-in: Relative paths"
    difficulty: hard
    description_md: |-
      In this stage, you'll implement the `cd` built-in command to handle relative paths for your shell.

      The `cd` command should be able to change the current working directory using relative paths. Relative paths are specified relative to the current directory. If the specified directory does not exist, it should print an error message indicating that the directory was not found.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a series of `cd` commands to your shell:

      ```bash
      $ cd /usr
      $ pwd
      /usr
      $ cd ./local/bin
      $ pwd
      /usr/local/bin
      $ cd ../../
      $ pwd
      /usr
      $ 
      ```

      The tester will check if the `cd` command correctly changes the directory using relative paths and if it properly handles invalid paths by displaying an appropriate error message.

      ### Notes

      - The `pwd` command will be used to verify the current working directory after using `cd`.
      - If the specified directory does not exist, print `cd: <directory>: No such file or directory`.
      - Relative paths like `./`, `../`, and more complex relative paths should be handled correctly.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` built-in command with relative paths.

  - slug: "gp4"
    primary_extension_slug: "navigation"
    name: "The cd built-in: Home directory"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `cd` built-in command to handle the `~` character for your shell.

      The `~` character is a shorthand for the user's home directory. When `cd` is received with `~`, your shell should change the current working directory to the user's home directory. This feature enhances user convenience, making it easier to navigate to the home directory.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_shell.sh
      ```

      It'll then send a series of `cd` commands to your shell:

      ```bash
      $ cd /usr/local/bin
      $ pwd
      /usr/local/bin
      $ cd ~
      $ pwd
      /home/user
      $
      ```

      The tester will check if the `cd` command correctly changes the directory to the user's home directory when `~` is used. You need to fetch the user's home directory from the `HOME` environment variable.

      ### Notes

      - Ensure that the `cd` command interprets `~` as the user's home directory.
      - The `pwd` command will be used to verify the current working directory after using `cd ~`.
      - The home directory is typically specified by the `HOME` environment variable.
    marketing_md: |-
      In this stage, you'll implement the ability for your shell to run the `cd` built-in command with the `HOME` directory.
